{"version":3,"sources":["../src/client-connection.ts"],"names":["PSConnection","socket","connected","queue","connect","server","PS","port","protocol","url","host","prefix","SockJS","timeout","onopen","console","log","msg","send","update","onmessage","e","receive","data","onclose","isOffline","roomid","rooms","push","connection","PSLoginServer","query","callback","id","location","pathname","endsWith","Config","routes","client","POKEMON_SHOWDOWN_TESTCLIENT_KEY","sid","replace","request","res","JSON","parse","slice","xhr","XMLHttpRequest","open","onreadystatechange","readyState","responseText","urlencodedData","key","encodeURIComponent","setRequestHeader"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,G;;;;AAIMA,Y;;;;AAIL,uBAAc,MAHdC,MAGc,CAHA,IAGA,MAFdC,SAEc,CAFF,KAEE,MADdC,KACc,CADN,EACM;AACb,KAAKC,OAAL;AACA,C;AACDA,O,CAAA,kBAAU;AACT,GAAMC,CAAAA,MAAM,CAAGC,EAAE,CAACD,MAAlB;AACA,GAAME,CAAAA,IAAI,CAAGF,MAAM,CAACG,QAAP,GAAoB,OAApB,CAA8B,EAA9B,CAAmC,IAAMH,MAAM,CAACE,IAA7D;AACA,GAAME,CAAAA,GAAG,CAAGJ,MAAM,CAACG,QAAP,CAAkB,KAAlB,CAA0BH,MAAM,CAACK,IAAjC,CAAwCH,IAAxC,CAA+CF,MAAM,CAACM,MAAlE;AACA,GAAMV,CAAAA,MAAM,CAAG,KAAKA,MAAL,CAAc,GAAIW,CAAAA,MAAJ,CAAWH,GAAX,CAAgB,EAAhB,CAAoB,CAACI,OAAO,CAAE,EAAI,EAAJ,CAAS,IAAnB,CAApB,CAA7B;AACAZ,MAAM,CAACa,MAAP,CAAgB,UAAM;AACrBC,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,KAAI,CAACd,SAAL,CAAiB,IAAjB;AACAI,EAAE,CAACJ,SAAH,CAAe,IAAf,CAHqB;AAIH,KAAI,CAACC,KAJF,6BAIhB,GAAMc,CAAAA,GAAG,gBAAT,CAAyBhB,MAAM,CAACiB,IAAP,CAAYD,GAAZ,EAJT;AAKrB,KAAI,CAACd,KAAL,CAAa,EAAb;AACAG,EAAE,CAACa,MAAH;AACA,CAPD;AAQAlB,MAAM,CAACmB,SAAP,CAAmB,SAACC,CAAD,CAAqB;AACvCf,EAAE,CAACgB,OAAH,CAAW,GAAKD,CAAC,CAACE,IAAlB;AACA,CAFD;AAGAtB,MAAM,CAACuB,OAAP,CAAiB,UAAM;AACtBT,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,KAAI,CAACd,SAAL,CAAiB,KAAjB;AACAI,EAAE,CAACJ,SAAH,CAAe,KAAf;AACAI,EAAE,CAACmB,SAAH,CAAe,IAAf;AACA,IAAK,GAAMC,CAAAA,MAAX,GAAqBpB,CAAAA,EAAE,CAACqB,KAAxB,CAA+B;AAC9BrB,EAAE,CAACqB,KAAH,CAASD,MAAT,EAAkBxB,SAAlB,CAA8B,KAA9B;AACA;AACD,KAAI,CAACD,MAAL,CAAc,IAAd;AACAK,EAAE,CAACa,MAAH;AACA,CAVD;AAWA,C;AACDD,I,CAAA,cAAKD,GAAL,CAAkB;AACjB,GAAI,CAAC,KAAKf,SAAV,CAAqB;AACpB,KAAKC,KAAL,CAAWyB,IAAX,CAAgBX,GAAhB;AACA;AACA;AACD,KAAKhB,MAAL,CAAYiB,IAAZ,CAAiBD,GAAjB;AACA,C;;;AAGFX,EAAE,CAACuB,UAAH,CAAgB,GAAI7B,CAAAA,YAAJ,EAAhB;;AAEA,GAAM8B,CAAAA,aAAa,CAAG;AACrBC,KADqB,CACrB,eAAMR,IAAN,CAAgBS,QAAhB,CAAoE;AACnE,GAAIvB,CAAAA,GAAG,CAAG,MAAQH,EAAE,CAACD,MAAH,CAAU4B,EAAlB,CAAuB,aAAjC;AACA,GAAIC,QAAQ,CAACC,QAAT,CAAkBC,QAAlB,CAA2B,OAA3B,CAAJ,CAAyC;AACxC3B,GAAG,CAAG,WAAa4B,MAAM,CAACC,MAAP,CAAcC,MAA3B,CAAoC9B,GAA1C;;AAEA,GAAI,MAAO+B,CAAAA,+BAAP,GAA2C,QAA/C,CAAyD;;AAExDjB,IAAI,CAACkB,GAAL,CAAWD,+BAA+B,CAACE,OAAhC,CAAwC,OAAxC,CAAiD,GAAjD,CAAX;AACA;AACD;AACD,KAAKC,OAAL,CAAalC,GAAb,CAAkBc,IAAlB,CAAwB,SAAAqB,GAAG,CAAI;AAC9B,GAAI,CAACA,GAAL,CAAUZ,QAAQ,CAAC,IAAD,CAAR,CAAV;AACKA,QAAQ,CAACa,IAAI,CAACC,KAAL,CAAWF,GAAG,CAACG,KAAJ,CAAU,CAAV,CAAX,CAAD,CAAR;AACL,CAHD;AAIA,CAfoB;AAgBrBJ,OAhBqB,CAgBrB,iBAAQlC,GAAR,CAAqBc,IAArB,CAAsCS,QAAtC,CAA8E;AAC7E,GAAMgB,CAAAA,GAAG,CAAG,GAAIC,CAAAA,cAAJ,EAAZ;AACAD,GAAG,CAACE,IAAJ,CAAS3B,IAAI,CAAG,MAAH,CAAY,KAAzB,CAAgCd,GAAhC;AACAuC,GAAG,CAACG,kBAAJ,CAAyB,UAAY;AACpC,GAAIH,GAAG,CAACI,UAAJ,GAAmB,CAAvB,CAA0B;AACzB,GAAI;AACHpB,QAAQ,CAACgB,GAAG,CAACK,YAAJ,EAAoB,IAArB,CAAR;AACA,CAAC,cAAM;AACPrB,QAAQ,CAAC,IAAD,CAAR;AACA;AACD;AACD,CARD;AASA,GAAIT,IAAJ,CAAU;AACT,GAAI+B,CAAAA,cAAc,CAAG,EAArB;AACA,IAAK,GAAMC,CAAAA,GAAX,GAAkBhC,CAAAA,IAAlB,CAAwB;AACvB,GAAI+B,cAAJ,CAAoBA,cAAc,EAAI,GAAlB;AACpBA,cAAc,EAAIE,kBAAkB,CAACD,GAAD,CAAlB,CAA0B,GAA1B,CAAgCC,kBAAkB,CAAEjC,IAAD,CAAcgC,GAAd,CAAD,CAApE;AACA;AACDP,GAAG,CAACS,gBAAJ,CAAqB,cAArB,CAAqC,mCAArC;AACAT,GAAG,CAAC9B,IAAJ,CAASoC,cAAT;AACA,CARD,IAQO;AACNN,GAAG,CAAC9B,IAAJ;AACA;AACD,CAvCoB,qBAAtB","sourcesContent":["/**\n * Connection library\n *\n * @author Guangcong Luo <guangcongluo@gmail.com>\n * @license MIT\n */\n\ndeclare var SockJS: any;\n\nclass PSConnection {\n\tsocket: any = null;\n\tconnected = false;\n\tqueue = [] as string[];\n\tconstructor() {\n\t\tthis.connect();\n\t}\n\tconnect() {\n\t\tconst server = PS.server;\n\t\tconst port = server.protocol === 'https' ? '' : ':' + server.port;\n\t\tconst url = server.protocol + '://' + server.host + port + server.prefix;\n\t\tconst socket = this.socket = new SockJS(url, [], {timeout: 5 * 60 * 1000});\n\t\tsocket.onopen = () => {\n\t\t\tconsole.log('\\u2705 (CONNECTED)');\n\t\t\tthis.connected = true;\n\t\t\tPS.connected = true;\n\t\t\tfor (const msg of this.queue) socket.send(msg);\n\t\t\tthis.queue = [];\n\t\t\tPS.update();\n\t\t};\n\t\tsocket.onmessage = (e: MessageEvent) => {\n\t\t\tPS.receive('' + e.data);\n\t\t};\n\t\tsocket.onclose = () => {\n\t\t\tconsole.log('\\u2705 (DISCONNECTED)');\n\t\t\tthis.connected = false;\n\t\t\tPS.connected = false;\n\t\t\tPS.isOffline = true;\n\t\t\tfor (const roomid in PS.rooms) {\n\t\t\t\tPS.rooms[roomid]!.connected = false;\n\t\t\t}\n\t\t\tthis.socket = null;\n\t\t\tPS.update();\n\t\t};\n\t}\n\tsend(msg: string) {\n\t\tif (!this.connected) {\n\t\t\tthis.queue.push(msg);\n\t\t\treturn;\n\t\t}\n\t\tthis.socket.send(msg);\n\t}\n}\n\nPS.connection = new PSConnection();\n\nconst PSLoginServer = new class {\n\tquery(data: {}, callback: (res: {[k: string]: any} | null) => void) {\n\t\tlet url = '/~~' + PS.server.id + '/action.php';\n\t\tif (location.pathname.endsWith('.html')) {\n\t\t\turl = 'https://' + Config.routes.client + url;\n\t\t\t// @ts-ignore\n\t\t\tif (typeof POKEMON_SHOWDOWN_TESTCLIENT_KEY === 'string') {\n\t\t\t\t// @ts-ignore\n\t\t\t\tdata.sid = POKEMON_SHOWDOWN_TESTCLIENT_KEY.replace(/\\%2C/g, ',');\n\t\t\t}\n\t\t}\n\t\tthis.request(url, data, res => {\n\t\t\tif (!res) callback(null);\n\t\t\telse callback(JSON.parse(res.slice(1)));\n\t\t});\n\t}\n\trequest(url: string, data: {} | null, callback: (res: string | null) => void) {\n\t\tconst xhr = new XMLHttpRequest();\n\t\txhr.open(data ? 'POST' : 'GET', url);\n\t\txhr.onreadystatechange = function () {\n\t\t\tif (xhr.readyState === 4) {\n\t\t\t\ttry {\n\t\t\t\t\tcallback(xhr.responseText || null);\n\t\t\t\t} catch {\n\t\t\t\t\tcallback(null);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tif (data) {\n\t\t\tlet urlencodedData = '';\n\t\t\tfor (const key in data) {\n\t\t\t\tif (urlencodedData) urlencodedData += '&';\n\t\t\t\turlencodedData += encodeURIComponent(key) + '=' + encodeURIComponent((data as any)[key]);\n\t\t\t}\n\t\t\txhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\t\t\txhr.send(urlencodedData);\n\t\t} else {\n\t\t\txhr.send();\n\t\t}\n\t}\n};\n"],"file":"client-connection.js"}